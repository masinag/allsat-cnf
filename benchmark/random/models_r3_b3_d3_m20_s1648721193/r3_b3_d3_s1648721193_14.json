(set-logic QF_LRA)
(declare-fun x_0 () Real)
(declare-fun x_1 () Real)
(declare-fun x_2 () Real)
(declare-fun A_0 () Bool)
(declare-fun A_1 () Bool)
(declare-fun A_2 () Bool)
(assert (let ((.def_0 (* (/ 810665245198461 2251799813685248) x_2))) (let ((.def_1 (* (- (/ 1249341316691091 4503599627370496)) x_0))) (let ((.def_2 (+ .def_1 .def_0))) (let ((.def_3 (< .def_2 (/ 1007696677847991 562949953421312)))) (let ((.def_4 (* (/ 974592846762279 2251799813685248) x_0))) (let ((.def_5 (* (- (/ 169153983384143 2251799813685248)) x_2))) (let ((.def_6 (* (/ 819572498458961 1125899906842624) x_1))) (let ((.def_7 (+ .def_6 .def_5 .def_4))) (let ((.def_8 (< .def_7 (/ 1375697128936843 562949953421312)))) (let ((.def_9 (* (- (/ 3830258840783051 4503599627370496)) x_1))) (let ((.def_10 (* (/ 669408996343697 1125899906842624) x_2))) (let ((.def_11 (* (- (/ 3542752722015791 4503599627370496)) x_0))) (let ((.def_12 (+ .def_11 .def_10 .def_9))) (let ((.def_13 (< .def_12 (/ 3234294048412211 1125899906842624)))) (let ((.def_14 (or A_2 .def_13 A_1 .def_8))) (let ((.def_15 (not A_2))) (let ((.def_16 (or .def_15 .def_14))) (let ((.def_17 (and A_0 A_1 A_1 A_0))) (let ((.def_18 (* (/ 1684131854475921 4503599627370496) x_1))) (let ((.def_19 (* (- (/ 34671137781423 562949953421312)) x_2))) (let ((.def_20 (+ .def_19 .def_18))) (let ((.def_21 (< .def_20 (/ 161873077494449 70368744177664)))) (let ((.def_22 (* (- (/ 2793089930305801 4503599627370496)) x_1))) (let ((.def_23 (* (- (/ 4098202262826331 4503599627370496)) x_0))) (let ((.def_24 (+ .def_23 .def_22))) (let ((.def_25 (< .def_24 (/ 4960011028505735 2251799813685248)))) (let ((.def_26 (or A_2 A_2 .def_25 .def_21))) (let ((.def_27 (or A_1 A_1))) (let ((.def_28 (or A_0 A_2 A_2 A_0))) (let ((.def_29 (or .def_28 .def_27 .def_26 .def_17))) (let ((.def_30 (or .def_29 .def_16 .def_3))) .def_30))))))))))))))))))))))))))))))))
(check-sat)
