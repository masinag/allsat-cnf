(set-logic QF_LRA)
(declare-fun x_0 () Real)
(declare-fun x_1 () Real)
(declare-fun x_2 () Real)
(declare-fun A_0 () Bool)
(declare-fun A_1 () Bool)
(declare-fun A_2 () Bool)
(assert (let ((.def_0 (not A_1))) (let ((.def_1 (* (- (/ 898462759806547 2251799813685248)) x_1))) (let ((.def_2 (< .def_1 (/ 3446083949976147 9007199254740992)))) (let ((.def_3 (* (- (/ 1998487583179117 4503599627370496)) x_2))) (let ((.def_4 (* (/ 1677742198263923 2251799813685248) x_0))) (let ((.def_5 (* (- (/ 414994768077503 1125899906842624)) x_1))) (let ((.def_6 (+ .def_5 .def_4 .def_3))) (let ((.def_7 (< .def_6 (/ 2919125227100327 1125899906842624)))) (let ((.def_8 (or A_1 .def_7 .def_2))) (let ((.def_9 (or A_1 A_1 A_2))) (let ((.def_10 (and .def_9 .def_8 .def_0))) (let ((.def_11 (and A_2 A_1 A_2))) (let ((.def_12 (not .def_11))) (let ((.def_13 (* (- (/ 368690658021523 1125899906842624)) x_0))) (let ((.def_14 (< .def_13 (/ 5762772444469215 4503599627370496)))) (let ((.def_15 (or A_2 .def_14))) (let ((.def_16 (or A_1 A_2))) (let ((.def_17 (or A_2 A_2 A_0))) (let ((.def_18 (and .def_17 .def_16 .def_15))) (let ((.def_19 (or .def_18 .def_12 A_0 .def_10))) .def_19)))))))))))))))))))))
(check-sat)
