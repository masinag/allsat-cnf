(set-logic QF_LRA)
(declare-fun x_0 () Real)
(declare-fun x_1 () Real)
(declare-fun x_2 () Real)
(declare-fun A_0 () Bool)
(declare-fun A_2 () Bool)
(assert (let ((.def_0 (* (/ 140316499786465 2251799813685248) x_2))) (let ((.def_1 (* (/ 2638593547233915 4503599627370496) x_0))) (let ((.def_2 (+ .def_1 .def_0))) (let ((.def_3 (< .def_2 (/ 3186757510684239 2251799813685248)))) (let ((.def_4 (* (/ 72043273353209 1125899906842624) x_0))) (let ((.def_5 (* (- (/ 578948887843643 4503599627370496)) x_1))) (let ((.def_6 (+ .def_5 .def_4))) (let ((.def_7 (< .def_6 (/ 7919456149694445 9007199254740992)))) (let ((.def_8 (and .def_7 .def_3))) (let ((.def_9 (or A_0 A_0 A_2))) (let ((.def_10 (* (/ 1529894113510131 4503599627370496) x_2))) (let ((.def_11 (* (- (/ 670359029935143 2251799813685248)) x_0))) (let ((.def_12 (+ .def_11 .def_10))) (let ((.def_13 (< .def_12 (/ 827571668437755 1125899906842624)))) (let ((.def_14 (* (/ 204331541818733 1125899906842624) x_1))) (let ((.def_15 (< .def_14 (/ 4669795041907473 4503599627370496)))) (let ((.def_16 (or .def_15 .def_13))) (let ((.def_17 (and .def_16 .def_9 .def_9 .def_8))) (let ((.def_18 (not .def_17))) .def_18))))))))))))))))))))
(check-sat)
