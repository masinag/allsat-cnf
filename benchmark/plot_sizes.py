import matplotlib
import matplotlib.pyplot as plt
from pysmt.shortcuts import Symbol, Iff
from pysmt.typing import BOOL

from allsat_cnf.label_cnfizer import LabelCNFizer
from allsat_cnf.polarity_cnfizer import PolarityCNFizer
from benchmark.plot import NAME_MAPPING, COLOR, LINESTYLES
from benchmark.utils.parsing import Mode

matplotlib.use("pgf")
matplotlib.rcParams.update({
    "pgf.texsystem": "pdflatex",
    'font.family': 'serif',
    'text.usetex': True,
    'pgf.rcfonts': False,
})

def A(i):
    return Symbol("A{}".format(i), BOOL)


def nested_iffs(i, j=0):
    if i == 0:
        return Iff(A(j), A(j + 1))
    else:
        return Iff(nested_iffs(i - 1, j), nested_iffs(i - 1, j + 2 ** i))

cnfizers = [
    (Mode.LABELNEG_POL, PolarityCNFizer(label_neg_polarity=True)),
    (Mode.LAB, LabelCNFizer()),
    (Mode.NNF_MUTEX_POL, PolarityCNFizer(nnf=True, mutex_nnf_labels=True)),
]

def main():
    n_clauses = {cname: [] for cname, _ in cnfizers}
    n_atoms = []

    n = 10
    for i in range(n):
        phi = nested_iffs(i)
        n_atoms.append(len(phi.get_free_variables()))
        # count number of clauses generated by each cnfizer
        for cname, cnfizer in cnfizers:
            cnf = cnfizer.convert_as_formula(phi)
            n_clauses[cname].append(len(cnf.args()))
    # plot results
    for cname, n_clauses in n_clauses.items():
        plt.plot(n_atoms, n_clauses, label=NAME_MAPPING[cname], color=COLOR[cname], linestyle=LINESTYLES[cname])
    plt.legend()
    plt.xlabel("Number of atoms")
    plt.ylabel("Number of clauses")
    plt.savefig("sizes.pdf")


if __name__ == '__main__':
    main()
